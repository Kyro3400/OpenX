<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css">
  </head>

<body class="font-sans bg-[#0C101C] text-gray-300 flex flex-col h-screen">
  <%- include('./Parts/Header/index.ejs') %>

  <div class="flex-1 flex overflow-hidden">
    <%- include('./Parts/Sidebar/index.ejs') %>

    <main class="flex-1 p-4 md:p-8 bg-[#0C101C] overflow-y-auto rounded-tl-lg">
      <div class="bg-[#0C101C] p-4 md:p-8 rounded-md shadow-md space-y-4 border border-[#41566E]">
        <div class="flex items-center justify-between">
          <h2 class="text-xl md:text-3xl font-bold text-white mb-4">Users</h2>
          <div class="flex space-x-4">
            <button id="openCreateModalBtn"
              class="text-sm bg-blue-500 hover:bg-blue-700 text-white font-bold py-1 px-2 rounded-lg transition duration-300 ease-in-out transform hover:scale-105">Create</button>
          </div>
        </div>

        <table class="w-full bg-[#0C101C] text-white border border-[#41566E]">
          <thead>
            <tr>
              <th class="py-2 px-4 text-center">ID</th>
              <th class="py-2 px-4 text-center">Username</th>
              <th class="py-2 px-4 text-center">Admin</th>
              <th class="py-2 px-4 text-center">Actions</th>
            </tr>
          </thead>
          <tbody id="userTableBody" class="w-full bg-[#0C101C] text-white border border-[#41566E]">
            <!-- User rows will be dynamically added here -->
          </tbody>
        </table>

        <!-- Create Modal -->
        <div id="CreateModal" class="modal fixed inset-0 hidden bg-gray-600 bg-opacity-50 flex items-center justify-center">
          <div class="modal-content bg-[#0C101C] p-6 rounded-lg shadow-lg">
            <h1 class="text-2xl font-bold mb-4 text-white">Create User</h1>

            <div class="mb-4">
              <label for="username" class="text-white block">Username:</label>
              <input type="text" id="username" name="username"
                class="bg-gray-800 text-white px-4 py-2 rounded focus:outline-none focus:shadow-outline-blue">
            </div>

            <div class="mb-4">
              <label for="password" class="text-white block">Password:</label>
              <input type="password" id="password" name="password"
                class="bg-gray-800 text-white px-4 py-2 rounded focus:outline-none focus:shadow-outline-blue">
            </div>

            <div class="mb-4">
              <input type="checkbox" id="isAdmin" name="isAdmin" class="mr-2">
              <label for="isAdmin" class="text-white">Admin</label>
            </div>

            <button id="createUserBtn"
              class="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline-green active:bg-green-800">
              Create
            </button>
          </div>
        </div>

        <!-- Edit Modal -->
        <div id="EditModal" class="modal fixed inset-0 hidden bg-gray-600 bg-opacity-50 flex items-center justify-center">
          <div class="modal-content bg-[#0C101C] p-6 rounded-lg shadow-lg">
            <h1 class="text-2xl font-bold mb-4 text-white">Edit User</h1>

            <div class="mb-4">
              <label for="editUsername" class="text-white block">New Username:</label>
              <input type="text" id="editUsername" name="editUsername"
                class="bg-gray-800 text-white px-4 py-2 rounded focus:outline-none focus:shadow-outline-blue">
            </div>

            <div class="mb-4">
              <label for="editPassword" class="text-white block">New Password:</label>
              <input type="password" id="editPassword" name="editPassword"
                class="bg-gray-800 text-white px-4 py-2 rounded focus:outline-none focus:shadow-outline-blue">
            </div>

            <div class="mb-4">
              <input type="checkbox" id="editIsAdmin" name="editIsAdmin" class="mr-2">
              <label for="editIsAdmin" class="text-white">Admin</label>
            </div>

            <button id="editUserBtn"
              class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline-blue active:bg-blue-800">
              Save Changes
            </button>
          </div>
        </div>
      </div>
    </main>

        <script>
          function createUser(username, password, isAdmin) {
            fetch('/api/users/create', {
              method: 'POST',
              headers: { 
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                username,
                password,
                isAdmin
              }),
            })
              .then(response => response.json())
              .then(newUser => {
                const userTableBody = document.getElementById('userTableBody');
                const row = document.createElement('tr');
                row.innerHTML = `
                  <td class="py-2 px-4 text-center">${newUser._id}</td>
                  <td class="py-2 px-4 text-center">${newUser.username}</td>
                  <td class="py-2 px-4 text-center">${newUser.isAdmin ? 'Yes' : 'No'}</td>
                  <td class="py-2 px-4 text-center">
                    <button onclick="updateUser('${newUser.username}')" class="text-sm bg-green-500 hover:bg-green-700 text-white font-bold py-1 px-2 rounded-lg transition duration-300 ease-in-out transform hover:scale-105">Edit</button>
                    <button onclick="deleteUser('${newUser.username}')" class="text-sm bg-red-500 hover:bg-red-700 text-white font-bold py-1 px-2 rounded-lg transition duration-300 ease-in-out transform hover:scale-105">Delete</button>
                  </td>
                `;
                userTableBody.appendChild(row);
              })
              .catch(error => console.error('Error creating user:', error));
          }

          function deleteUser(username) {
            fetch(`/api/users/delete/${username}`, {
              method: 'DELETE',
            })
              .then(() => {
                fetchAndPopulateUsers();
              })
              .catch(error => console.error('Error deleting user:', error));
          }


          function updateUser(username) {
            fetch(`/api/users/${username}`, {
              method: 'PUT',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({}),
            })
              .then(() => {
                fetchAndPopulateUsers();
              })
              .catch(error => console.error('Error updating user:', error));
          }

          function fetchAndPopulateUsers() {
            fetch('/api/users')
              .then(response => response.json())
              .then(users => {
                const userTableBody = document.getElementById('userTableBody');
                userTableBody.innerHTML = '';

                users.forEach(user => {
                  const row = document.createElement('tr');
                  row.innerHTML = `
                    <td class="py-2 px-4 text-center">${user.userid}</td>
                    <td class="py-2 px-4 text-center">${user.username}</td>
                    <td class="py-2 px-4 text-center">${user.isAdmin ? 'Yes' : 'No'}</td>
                    <td class="py-2 px-4 text-center">
                      <button onclick="updateUser('${user.username}')" class="text-sm bg-green-500 hover:bg-green-700 text-white font-bold py-1 px-2 rounded-lg transition duration-300 ease-in-out transform hover:scale-105">Edit</button>
                      <button onclick="deleteUser('${user.username}')" class="text-sm bg-red-500 hover:bg-red-700 text-white font-bold py-1 px-2 rounded-lg transition duration-300 ease-in-out transform hover:scale-105">Delete</button>
                    </td>
                  `;
                  userTableBody.appendChild(row);
                });
              })
              .catch(error => console.error('Error fetching users:', error));
          }

          fetchAndPopulateUsers();

          document.addEventListener("DOMContentLoaded", function () {
            const CreateModalBTN = document.getElementById('CreateModalBTN');
            const CloseCreateModalBtn = document.getElementById('CloseCreateModalBtn');
            const modal = document.getElementById('CreateModal');

            CreateModalBTN.addEventListener('click', function () {
              modal.classList.remove('hidden');
            });

            CloseCreateModalBtn.addEventListener('click', function () {
              modal.classList.add('hidden');
            });
          });

          document.addEventListener("DOMContentLoaded", function () {
        const openCreateModalBtn = document.getElementById('openCreateModalBtn');
        const createModal = document.getElementById('CreateModal');
        const createUserBtn = document.getElementById('createUserBtn');

        openCreateModalBtn.addEventListener('click', function () {
          createModal.classList.remove('hidden');
          document.body.style.overflow = 'hidden'; 
        });

        createUserBtn.addEventListener('click', async () => {
          let username = document.getElementById("username").value;
          let password = document.getElementById("password").value; 
          let isAdmin = document.getElementById("isAdmin").checked;
          if(!username || !password || !isAdmin) {
          }
          createUser(username,password,isAdmin)
          createModal.classList.add('hidden');
          document.body.style.overflow = ''; 
        });
      }); 

      document.addEventListener("DOMContentLoaded", function () {
        const openEditModalBtn = document.getElementById('openEditModalBtn');
        const editModal = document.getElementById('EditModal');
        const editUserBtn = document.getElementById('editUserBtn');

        openEditModalBtn.addEventListener('click', function () {
          editModal.classList.remove('hidden');
          document.body.style.overflow = 'hidden';
        });

        editUserBtn.addEventListener('click', async () => {
          let newUsername = document.getElementById("editUsername").value;
          let newPassword = document.getElementById("editPassword").value;
          let newIsAdmin = document.getElementById("editIsAdmin").checked;

          editModal.classList.add('hidden');
          document.body.style.overflow = '';
        });
      });
        </script>
    </div>
  </body>
